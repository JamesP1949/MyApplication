git reset [--hard|soft|mixed|merge|keep] [<commit>或HEAD]：将当前的分支重设（reset）
到指定的<commit>或者HEAD（默认，如果不显示指定commit，默认是HEAD，即最新的一次提交），
并且根据[mode]有可能更新index和working directory。mode的取值可以是hard、soft、
mixed、merged、keep。
A). --hard：重设（reset） index和working directory，自从<commit>以来在working directory
中的任何改变都被丢弃，并把HEAD指向<commit>。
    具体一个例子，假设有三个commit， git st:
    commit3: add test3.c
    commit2: add test2.c
    commit1: add test1.c
    执行git reset --hard HEAD~1后，// HEAD~1 1代表相应commit操作后HEAD头的指针 通过git reflog命令查看
    显示：HEAD is now at commit2，运行git log
    commit2: add test2.c
    commit1: add test1.c
    运行git st， 没有任何变化
B). --soft：index和working directory中的内容不作任何改变，仅仅把HEAD指向<commit>。这个模式的效果是，执行完毕后，自从<commit>以来的所有改变都会显示在git status的"Changes to be committed"中。
    具体一个例子，假设有三个commit， git st:
    commit3: add test3.c
    commit2: add test2.c
    commit1: add test1.c
    执行git reset --soft(默认) HEAD~1后，运行git log
    commit2: add test2.c
    commit1: add test1.c
    运行git status， 则test3.c处于暂存区，处于准备提交状态。即此时git commit就会提交它。
    在使用git进行协作开发时，我们经常需要将自己的修改生成patch发给被人，但是在修改代码的
    过程中我们进行了很多次的提交，如何生成从最初的代码状态到最终代码状态的patch呢？
    下面要介绍的功能是应对这中情况。
    现假设我们git软件仓库中的分支情况如下：
    a-->b-->c
    也就是说我们的代码从状态a修改到状态b，进行一次提交，然后再修改到状态c，进行一次提交。
    这时我们已经肯定由a到c的修改是正确的，不再需要状态b了，并且要把从a到c的变化生成一个
    patch发送给别人。如果直接打包的话会生成两个path，那么如何生成一个patch呢，这时就需要
    git-reset命令。
    首先给状态a创建一个tag，假设名称为A，然后执行
    git-reset --soft A
    这样我们的软件仓库就变为
    a
    状态b和状态c都已经被删除了，但是当前的代码并没有被改变，还是状态c的代码，这时我们
    做一次提交，软件仓库变成下面的样子：
    a-->d
    状态d和状态c所对应的代码是完全相同的，只是名字不同。现在就可以生成一个patch打包发给别人了